{"version":3,"sources":["../src/index.js"],"names":["createError","require","express","path","cookieParser","logger","cors","app","http","Server","router","use","json","urlencoded","extended","static","join","__dirname","get","req","res","send","next","err","locals","message","error","status","render","code","listen","process","env","PORT","module","exports"],"mappings":";;AAAA,IAAMA,cAAcC,QAAQ,aAAR,CAApB;AACA,IAAMC,UAAUD,QAAQ,SAAR,CAAhB;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,eAAeH,QAAQ,eAAR,CAArB;AACA,IAAMI,SAASJ,QAAQ,QAAR,CAAf;AACA,IAAMK,OAAOL,QAAQ,MAAR,CAAb;AACA,IAAMM,MAAML,SAAZ;AACA,IAAMM,OAAOP,QAAQ,MAAR,EAAgBQ,MAAhB,CAAuBF,GAAvB,CAAb;AACA,IAAMG,SAAST,QAAQ,oBAAR,CAAf;;AAEAM,IAAII,GAAJ,CAAQN,OAAO,KAAP,CAAR;AACAE,IAAII,GAAJ,CAAQT,QAAQU,IAAR,EAAR;AACAL,IAAII,GAAJ,CAAQT,QAAQW,UAAR,CAAmB,EAAEC,UAAU,KAAZ,EAAnB,CAAR;AACAP,IAAII,GAAJ,CAAQP,cAAR;AACAG,IAAII,GAAJ,CAAQT,QAAQa,MAAR,CAAeZ,KAAKa,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;AACAV,IAAII,GAAJ,CAAQL,MAAR;AACAC,IAAII,GAAJ,CAAQ,GAAR,EAAaD,MAAb;;AAEAH,IAAIW,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvBA,MAAIC,IAAJ,CAAS,IAAT;AACH,CAFD;;AAIA;AACAd,IAAII,GAAJ,CAAQ,UAAUQ,GAAV,EAAeC,GAAf,EAAoBE,IAApB,EAA0B;AAC9BA,OAAKtB,YAAY,GAAZ,CAAL;AACD,CAFH;;AAIA;AACAO,IAAII,GAAJ,CAAQ,UAAUY,GAAV,EAAeJ,GAAf,EAAoBC,GAApB,EAAyBE,IAAzB,EAA+B;AACnC;AACAF,MAAII,MAAJ,CAAWC,OAAX,GAAqBF,IAAIE,OAAzB;AACAL,MAAII,MAAJ,CAAWE,KAAX,GAAmBP,IAAIZ,GAAJ,CAAQW,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCK,GAAvC,GAA6C,EAAhE;;AAEA;AACAH,MAAIO,MAAJ,CAAWJ,IAAII,MAAJ,IAAc,GAAzB;AACAP,MAAIQ,MAAJ,CAAW,OAAX;AACD,CARH;;AAUE;AACA;AACA,IAAIrB,IAAIW,GAAJ,CAAQ,KAAR,MAAmB,aAAvB,EAAsC;AACpCX,MAAII,GAAJ,CAAQ,UAAUY,GAAV,EAAeJ,GAAf,EAAoBC,GAApB,EAAyBE,IAAzB,EAA+B;AACrCF,QAAIO,MAAJ,CAAWJ,IAAIM,IAAJ,IAAY,GAAvB,EACGjB,IADH,CACQ;AACJe,cAAQ,OADJ;AAEJF,eAASF;AAFL,KADR;AAKD,GAND;AAOD;;AAED;AACA;AACAhB,IAAII,GAAJ,CAAQ,UAAUY,GAAV,EAAeJ,GAAf,EAAoBC,GAApB,EAAyBE,IAAzB,EAA+B;AACrCF,MAAIO,MAAJ,CAAWJ,IAAII,MAAJ,IAAc,GAAzB,EACGf,IADH,CACQ;AACJe,YAAQ,OADJ;AAEJF,aAASF,IAAIE;AAFT,GADR;AAKD,CAND;;AAQAjB,KAAKsB,MAAL,CAAYC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAhC;;AAEAC,OAAOC,OAAP,GAAiB5B,GAAjB","file":"index.js","sourcesContent":["const createError = require('http-errors')\nconst express = require('express')\nconst path = require('path')\nconst cookieParser = require('cookie-parser')\nconst logger = require('morgan')\nconst cors = require('cors')\nconst app = express()\nconst http = require('http').Server(app)\nconst router = require('./routes/apiRouter')\n\napp.use(logger('dev'))\napp.use(express.json())\napp.use(express.urlencoded({ extended: false }))\napp.use(cookieParser())\napp.use(express.static(path.join(__dirname, 'public')))\napp.use(cors())\napp.use('/', router)\n\napp.get('/', (req, res) => {\n    res.send('Hi')\n})\n\n// catch 404 and forward to error handler\napp.use(function (req, res, next) {\n    next(createError(404))\n  });\n\n// error handler\napp.use(function (err, req, res, next) {\n    // set locals, only providing error in development\n    res.locals.message = err.message\n    res.locals.error = req.app.get('env') === 'development' ? err : {}\n  \n    // render the error page\n    res.status(err.status || 500)\n    res.render('error')\n  });\n  \n  // development error handler\n  // will print stacktrace\n  if (app.get('env') === 'development') {\n    app.use(function (err, req, res, next) {\n      res.status(err.code || 500)\n        .json({\n          status: 'error',\n          message: err\n        });\n    });\n  }\n  \n  // production error handler\n  // no stacktraces leaked to user\n  app.use(function (err, req, res, next) {\n    res.status(err.status || 500)\n      .json({\n        status: 'error',\n        message: err.message\n      });\n  });\n\n  http.listen(process.env.PORT || 8080)\n\n  module.exports = app"]}