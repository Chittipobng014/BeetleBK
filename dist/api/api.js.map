{"version":3,"sources":["../../src/api/api.js"],"names":["promise","require","options","promiseLib","pgp","connection","db","api","getAllBoxs","req","res","next","branchid","body","toString","any","dbHelper","allBoxs","send","json","response","data","message","console","log","getAvailableBoxs","availableBoxs","getInuseBoxs","inuseBoxs","updateToInuse","boxid","id","passcode","faceid","none","update","err","updateToAvai"],"mappings":"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","file":"api.js","sourcesContent":["const promise = require('bluebird')\nconst options = { promiseLib: promise }\nconst pgp = require('pg-promise')(options)\nconst connection = \"postgres://clgfhgaukuolin:09efedd1bf282ea7dc4b9091b07f94155e1e4d9633a72dddff2ccf70b7ca83e0@ec2-54-83-22-244.compute-1.amazonaws.com:5432/dbhajskmdk85id\"\nconst db = pgp(connection)\nimport dbHelper from './sql/sqlCollections'\n\nconst api = {\n    getAllBoxs: async (req, res, next) => {\n        try {\n            const branchid = req.body.branchid.toString()\n            const allBoxs = await db.any(dbHelper.getAllBoxs, [branchid])\n            res.send(200).json({\n                response: {\n                    data: allBoxs,\n                    message: 'Successfully'\n                }\n            })\n        } catch (err) {\n            console.log(err)\n            return next(err)\n        }\n    },\n    getAvailableBoxs: async (req, res, next) => {\n        try {\n            const branchid = req.body.branchid.toString()\n            const availableBoxs = await db.any(dbHelper.getAvailableBoxs, [branchid])\n            res.send(200).json({\n                response: {\n                    data: availableBoxs,\n                    message: 'Successfully'\n                }\n            })\n        } catch (err) {\n            console.log(err)\n            return next(err)\n        }\n    },\n    getInuseBoxs: async (req, res, next) => {\n        try {\n            const branchid = req.body.branchid.toString()\n            const inuseBoxs = await db.any(dbHelper.getInuseBoxs, [branchid])\n            res.send(200).json({\n                response: {\n                    data: inuseBoxs,\n                    message: 'Successfully'\n                }\n            })\n        } catch (err) {\n            console.log(err)\n            return next(err)\n        }\n    },\n    updateToInuse: async (req, res, next) => {\n        try {\n            const branchid = req.body.branchid.toString()\n            const boxid = req.body.id.toString()\n            const passcode = req.body.passcode.toString()\n            const faceid = req.body.faceid.toString()\n            const update = await db.none(dbHelper.updateToInuse, [branchid, boxid, passcode, faceid])\n            res.send(200).json({\n                data: update,\n                message: 'Successfully'\n            })\n        } catch (error) {\n            console.log(err)\n            return next(err)\n        }\n    },\n    updateToAvai: async (req, res, next) => {\n        try {\n            const branchid = req.body.branchid.toString()\n            const boxid = req.body.id.toString()\n            const update = await db.none(dbHelper.updateToInuse, [branchid, boxid])\n            res.send(200).json({\n                data: update,\n                message: 'Successfully'\n            })\n        } catch (error) {\n            console.log(err)\n            return next(err)\n        }\n    }\n}\nexport default { api }"]}